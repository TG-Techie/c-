// SECTION lark entry point
//start: (funcdef | classdef | assign_stmt | NEWLINE)*
start: (funcdef | traitdef | classdef | stmt | NEWLINE)*

//tokens

TRUE: "True"
FALSE: "False"
NONE: "None"

STRING      : /("(?!"").*?(?<!\\)(\\\\)*?"|'(?!'').*?(?<!\\)(\\\\)*?')/i
LONG_STRING : /(""".*?(?<!\\)(\\\\)*?"""|'''.*?(?<!\\)(\\\\)*?''')/is

DEC_NUMBER  : /[0-9]\d*/i
HEX_NUMBER  : /0x[\da-f]*/i
OCT_NUMBER  : /0o[0-7]*/i
QUAD_NUMBER : /0q[0-3]*/i
BIN_NUMBER  : /0b[0-1]*/i
FLOAT_NUMBER: /((\d+\.\d*|\.\d+)(e[-+]?\d+)?|\d+(e[-+]?\d+))/i

TYPENAME: /_*[A-Z][a-zA-Z_0-9]{2,}/
VARNAME:  /_*[a-z][a-zA-Z_0-9]*/

LONGCOMMENT  : /###[^#]*###/
BREAKCOMMENT : /##[^#\n]*##/
LINECOMMENT  : /#[^\n]*/
COMMENT : LONGCOMMENT | LINECOMMENT | BREAKCOMMENT
NEWLINE : ( COMMENT? /\r?\n[\t \f]*/ )+

typelist: (typename varname (comma typename varname)*)?  comma?
        | NEWLINE INDENT (typename varname (comma typename varname)*)?  (comma | NEWLINE) DEDENT
//arglist: (varname (comma varname)*)? comma?
paramlist: (expr (comma expr)*)? comma?
comma: "," COMMENT? NEWLINE?

// statement
stmt: pass_stmt     | del_stmt      | continue_stmt | break_stmt
    | if_stmt       | while_stmt    | count_stmt    | for_stmt
    | return_stmt                   | assign_stmt   | expr_stmt

pass_stmt: "pass" NEWLINE
continue_stmt: "continue" NEWLINE
break_stmt: "break" NEWLINE
del_stmt : "del" varname (comma varname)* NEWLINE

expr_stmt: expr NEWLINE

if_stmt : "if" expr stmt_block ("elif" expr stmt_block)* ("else" stmt_block)//? //require else for all ifs (test)

while_stmt : "while" expr stmt_block
for_stmt   : "for" "each" varname "in" expr stmt_block
count_stmt   : "count" (to_pair|from_pair|by_pair)* stmt_block

to_pair   : "to" expr
from_pair : "from" expr
by_pair   : "by" expr

assign_stmt : identifr "=" expr NEWLINE
return_stmt : "return" expr NEWLINE | "return" NEWLINE

funcdec  : "dec" (get | set)? varname "(" typelist ")" ("returns" typename)? NEWLINE
funcdef  : "def" (get | set)? varname "(" typelist ")" ("returns" typename)? stmt_block

get: "get"
set: "set"

classdef : "class" TYPENAME ("contains" "(" typelist ")")? class_block
         | "class" TYPENAME ("extends" typename "with" "(" typelist ")")? class_block

traitdec : "trait" TYPENAME NEWLINE
traitdef : "trait" TYPENAME traitdef_block
traitimpl : "trait" TYPENAME traitimpl_block

// block, ie indented sections fo code
stmt_block  : ":" NEWLINE INDENT stmt+ DEDENT
            | ":" stmt

class_block : ":" NEWLINE INDENT (funcdef | traitimpl | pass_stmt)+ DEDENT
            | ":" pass_stmt
            //| NEWLINE

traitdef_block : ":" NEWLINE INDENT (funcdec | traitdec | pass_stmt)+ DEDENT
            | ":" pass_stmt

traitimpl_block : ":" NEWLINE INDENT (funcdef | pass_stmt)+ DEDENT
            | ":" pass_stmt
            //| NEWLINE

expr: literal       | call_expr     | var_expr
    | binop_expr    | uniop_expr    | "(" expr ")"
    | negop_expr
call_expr   : identifr "(" paramlist ")" // determine if method or __call__ at model time
var_expr    : identifr
uniop_expr  : uniop expr
binop_expr  : expr binop expr
negop_expr  : "-" expr

binop: bitws_binop | arith_binop | compr_binop | logcl_binop
logcl_binop : "is" "not" -> isnot   | "is"  -> is
            | "or"  -> or           | "xor" -> xor
            | "and" -> and

compr_binop : "!=" -> noteq     | "==" -> eq    | ">=" -> grtreq
            | "<=" -> lesseq    | ">" -> gr     | "<" -> ls
            | "not" "in" -> notin   | "in"  -> in

arith_binop : "+" -> add        | "-" -> sub    | "*" -> mul
            | "//" -> floordiv  | "/" -> div    | "%" -> mod
            | "**" -> pow

bitws_binop : "&" -> bwand      | "^" -> bwxor  | "|" -> bwor
            | "<<" -> bwlshift  | ">>" -> bwrshift

uniop : "not" -> not | "~" -> bwnot

typename : builtintype | TYPENAME
identifr  : varname ("." varname)*  // identifier
varname  : VARNAME

builtintype: "Int" -> int | "Bool" -> bool | "Str" -> str
           | "Float" -> float | "NoneType" -> nonetype
           | "SomeType" -> selftype | "Self" -> selftype
           | "<" typename ">" -> arrtype
           | "[" typename ":" typename "]" -> maptype

literal : number | string | bool | none | arraylitrl | maplitrl

// SECTION postlex declares and ignores
number: integer | float
integer: HEX_NUMBER | BIN_NUMBER | OCT_NUMBER | QUAD_NUMBER | DEC_NUMBER
float: FLOAT_NUMBER
string: STRING | LONG_STRING
//string: single_string | double_string //| ling_single_string | long_double_string
bool: TRUE | FALSE
none: NONE
arraylitrl: "<" expr ("," expr)* ","? ">"
maplitrl: "[" expr ":" expr ("," expr ":" expr)* ","? "]"


%ignore /[\t \f]+/  // WS
%ignore /\\/ NEWLINE  // LINE_CONT
%ignore COMMENT

// for indenter post processing
%declare INDENT DEDENT
